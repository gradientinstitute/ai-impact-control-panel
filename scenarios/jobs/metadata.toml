name = "Job Match Recommender" 
purpose = """Match candidates to roles that they will apply for and are suited 
to their qualifications and experience."""
operation = """The system recommends advertised roles to individual users on
the platform. The recommended roles should suit the user's field, skills and
experience."""

data = """Inputs to the model are attributes of the user such as their 
qualifications, years of experience and skills, and attributes of the role
such as experience, qualifications required and salary. There is also
historical information about which users applied and were interviewed for
previously advertised roles."""

decision_rules = """If a matching score from the ML model is above a threshold,
 the role is recommended to the user."""

candidates = """Candidate models have been generated by model parameter and 
threshold sweeps."""

primary_metric = "precision"  # This has to refer to a metric

[actions]
recommend = """Selected users are shown matched roles to apply for on 
their platform home page."""
  
[targets]
matches = """The user applies for the role and gets an interview."""
  
[objectives.shortlist_suitable_candidates]
name = "Successfully Match Candidates to Roles"
description = """Ensure that the recommendations made to candidates are a 
good fit where they will apply and get an interview."""

[objectives.minimise_missing_out]
name = "Oportunities for Qualified Candidates"
description = """Minimise the chance that candidates will be overlooked for a 
role that is suited to them."""

[objectives.dont_disadvantage_women]
name = "Equal Opportunity for Women"
description = """Ensure the system does not systemically overlook women for 
roles that are suited to them."""

[metrics.precision]
name = "Success Rate of Recommendations"
benefit = "Successful Matchings"
icon = "shortlist.png"
captures = ["shortlist_suitable_candidates"]
limitations = """Recording a successful match does not mean that the candidates 
are actually be hired for the role, only that they got an interview."""
description = """Percentage of recommendations that lead to an interview."""
more = "more"
less = "fewer"
prefix = ""
suffix = "% of the time"
scrollbar = "% of recommendations lead to an interview"
action = "make{s} successful recommendations"
compare = "% more often than"
lowerIsBetter = false
displayDecimals = 0
type = "quantitative" # type determines how options are presented to the user
                        # omitting type sets the default to quantitative

range_min = 0
range_max = 100

[metrics.fnr]
name = "Overlooked Candidates"
benefit = "Inclusiveness"
captures = ["minimise_missing_out"]
limitations = """False negatives (missed candidates) are difficult to
capture if the training data is from an existing AI system."""
icon = "missout.png"
description = """Proportion of suitable candidates who were overlooked by the 
system."""
more = "more"
less = "fewer"
prefix = ""
suffix = "% of suitable candidates"
scrollbar = "% of suitable candidates are overlooked"
compare = "% more suitable candidates than"
action = "overlooks"
displayDecimals = 0

range_min = 0
range_max = 100

[metrics.fnr_difference]
name = "Inequality of Opportunity"
benefit = "Fairness"
icon = "fairness.png"
description = """Difference in rate that suitable women are overlooked compared
to suitable men."""
captures = ["dont_disadvantage_women"]
limitations = """Sensitive to historical bias if suitable women weren't 
interviewed in the training data"""
more = "more"
less = "fewer"
prefix = ""
suffix = "% less often than suitable men"
scrollbar = "% more likely that suitable women are overlooked"
action = "recommends suitable women"
compare = " percentage points less equally than"
displayDecimals = 0

range_min = 0
range_max = 100

[metrics.privacy_level]
name = "Use of Private Data"
benefit = "Privacy Level"
icon = "fairness.png"
description = """Level of private data used in the training set"""
captures = ["shortlist_suitable_candidates"]
limitations = """no actual distinguishing"""
type = "qualitative"

# the values for the options are 0... n-1 respectively
# options should include a verb
options = ["only uses public data", "requires some private data",
           "extensively uses private data"] 

# for comparison between two systems
comparison_better = "uses less personal data than" 
comparison_worse = "uses more personal data than"
comparison_equal = "uses the same amount of personal data as"

range_min = 0
range_max = 2
